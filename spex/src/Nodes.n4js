

export public abstract class Node {

	@Final
	public parent: Element;

	startOffset: int;
	endOffset: int;

	/**
	 * Creates this node with given parent and add this node to parent's child nodes.
	 */
	constructor(parent: Element) {
		if (this instanceof Document) {
			return;
		}

		if (!parent) {
			throw new Error("node requires a parent");
		}

		this.parent = parent;
		if (!parent.nodes) {
			parent.nodes = [this];
		} else {
			parent.nodes.push(this);
		}
	}

	public abstract toXML(indent=0): string
}

const TAB = "    ";

export public abstract class Element extends Node {

	@Final
	name: string;

	@Final
	indentLevel: int;

	id: string;
	attributes: [Attribute];
	nodes: [Node];

	constructor(name: string, indentLevel: int, parent: Element) {
		super(parent);
		this.name = name;
		this.indentLevel = indentLevel;
	}

	@Override
	public toXML(): string {
		let parts: [string] = [];
		parts.push("<" + this.name + (this.attributes ?
				this.attributes.map(a => " " + a.name + '= "' + a.value + '"').join("") : ""));

		if (this.nodes) {
			parts.push(">");
			parts.push(this.nodes.map((c, i) => {
					if (!(c instanceof CDATA || i > 0)) {
						return "\n" + TAB.repeat(this.indentLevel) + c.toXML();
					} else {
						return c.toXML();
					}
				}).join("\n"));
			if (!(this.nodes[this.nodes.length - 1] instanceof CDATA)) {
				parts.push("\n" + TAB.repeat(this.indentLevel));
			}
			parts.push("</" + this.name + ">");
		} else {
			parts.push(" />");
		}
		return parts.join("");
	}

	/**
	 * Returns the closest block element, either itself or container.
	 */
	public get block(): Block {
		if (this.parent) return this.parent.block;
		return undefined;
	}

}

/**
 * A block contains other elements but no CDATA directly.
 */
export public class Block extends Element {

	/**
	 * Returns this.
	 */
	@Override
	public get block(): Block {
		return this;
	}
}

export public abstract class CDATAContainer extends Element {

	public get tailCDATA(): string {
		if (this.nodes && this.nodes[this.nodes.length - 1] instanceof CDATA) {
			let cdata = this.nodes[this.nodes.length - 1] as CDATA;
			return cdata.content;
		}
		return "";
	}
	
	public addCDATA(s: string) {
		let cdata: CDATA;
		if (this.nodes && this.nodes[this.nodes.length - 1] instanceof CDATA) {
			cdata = this.nodes[this.nodes.length - 1] as CDATA;
		} else {
			cdata = new CDATA(this);
		}
		cdata.add(s);
	}

}

/** 
 * An inline element may contain CDATA or other inline elements, 
 * but not blocks, paragraphs or lines.
 */
export public class Inline extends CDATAContainer {}

/**
 * A paragraph can only contain CDATA or inline elements, but no block elements nor
 * other paragraphs. 
 */
export public class Paragraph extends CDATAContainer {
	
}


export public class CDATA extends Node {
	content = "";

	@Override
	public toXML(): string {
		return this.content;
	}

	public add(s: string) {
		this.content = this.content + s;
	}

	

}

export public class Attribute {
	name: string;
	value: string;
}

export public class Document extends Block {
	indexes: Map<string, [Element]>;

	constructor() {
		super("spex", 0, undefined);
	}

	public stringify(offsets=false, ids=false): string {
		return JSON.stringify(this, (key, value) => {
				if (key == "parent" || key == "indentLevel"
					|| (!offsets && key.endsWith("Offset"))
					|| (!ids && key == "id")) {
					return undefined;
				}
				return value;
			});
	}

}
