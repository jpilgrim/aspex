import {Token} from "Token";

export public interface ITokenIterator extends Iterator<Token> {

	/**
	 * Returns the n-th token ahead without removing it, 0 is the next token.
	 * Peeking never expands the token stream!
	 * If no such token exists, null is returned.
	 */
	public abstract peek(lookAhead: int=0): Token;

	/**
	 * Returns true if call to next() would return a value.
	 */
	public hasNext(): boolean
}

class SingleTokenIterator implements ITokenIterator {
	entry: IteratorEntry<Token>;
	constructor(entry: IteratorEntry<Token>) {
		this.entry = entry;
	}

	@Override
	public hasNext(): boolean {
		return !this.entry.done;
	}

	@Override
	public peek(lookAhead: int=0): Token {
		if (lookAhead > 0 || this.entry.done) {
			return null;
		}
		return this.entry.value;
	}

	@Override
	public next(): IteratorEntry<Token> {
		let next = this.entry;
		if (!this.entry.done) {
			return this.entry = {done: true, value: undefined};
		}
		return next;

	}

}

class TokenIterator implements ITokenIterator {

	@Final
	tokens: [IteratorEntry<Token>];
	constructor(tokens: [IteratorEntry<Token>]) {
		this.tokens = tokens;
	}

	@Override
	public hasNext(): boolean {
		return this.tokens.length > 0;
	}

	@Override
	public peek(lookAhead: int=0): Token {
		if (lookAhead >= this.tokens.length) {
			return null;
		}
		return this.tokens[lookAhead].value;
	}

	@Override
	public next(): IteratorEntry<Token> {
		if (!this.hasNext()) {
			return {done: true, value: undefined};
		}
		return this.tokens.shift();
	}

}

export public interface IExpandableTokenIterator extends ITokenIterator {
	public add(expansion: ITokenIterator);
}

export public class ExpandableTokenIterator implements IExpandableTokenIterator {

	tokens: [ITokenIterator] = [];

	@Override
	public add(expansion: ITokenIterator) {
		this.tokens.push(expansion);
	}

	@Override
	public next(): IteratorEntry<Token> {
		while (this.tokens.length > 0) {
			let iterEntry = this.tokens[this.tokens.length - 1].next();
			if (iterEntry.done) {
				this.tokens.pop();
			} else {
				return iterEntry;
			}
		}
		return {done: true, value: undefined};
	}

	@Override
	public hasNext(): boolean {
		while (this.tokens.length > 0) {
			let iter = this.tokens[this.tokens.length - 1];
			if (iter.hasNext()) {
				return true;
			} else {
				this.tokens.pop();
			}
		}
		return false;
	}

	/**
	 * Returns the n-th token ahead without removing it, 0 is the next token.
	 * If end of stream is found, null is returned instead.
	 */
	@Override
	public peek(lookAhead: int = 0): Token {
		if (lookAhead == 0) {
			if (!this.hasNext()) return null;
			let iterEntry = this.next();
			// save for later:
			this.tokens.push(new SingleTokenIterator(iterEntry));
			return iterEntry.value;
		}
		let peeked: [IteratorEntry<Token>] = [];
		let next = this.next();
		while (!next.done && lookAhead >= 0) {
			peeked.push(next);
			lookAhead--;
		}
		this.tokens.push(new TokenIterator(peeked));
		if (lookAhead < 0) {
			return next.value;
		}
		return null;
	}

}
