import {readFile} from "fs";
import {N4Injector} from "n4js/lang/N4Injector";
import {Document} from "org/mdspex/ASTNodes";
import {DefaultExtensionBinder} from "org/mdspex/DefaultExtensionBinder";
import {NoExtensionBinder} from "org/mdspex/DefaultExtensionBinder";
import {Element as HTMLElement} from "org/mdspex/HTMLNodes";
import {InputSource} from "org/mdspex/InputSource";
import {OutputProcessor} from "org/mdspex/OutputProcessor";
import {Parser} from "org/mdspex/Parser";
import {SmartEqual} from "org/mdspex/SmartEqual";
import {delimiter} from "path";
import {join} from "path";


export public interface ~SourceAndExpectation {
	source: string;
	expected: string;
}

export interface IBasicResourceBasedTest {
	
	
    get resSubFolderName(): string { return "parserTests" }
    
    get resExtension(): string { return ".spex_xml"}
	
	get injector(): N4Injector;
	get name(): string;
/**
	 * Returns resource path relative to test project's res folder.
	 * Use nodes sep for separating path segments.
	 * 
	 * By default, this returns the name of the test class with
	 * removed "Tests" (or "Test") suffix and first letter lower case.
	 */
	protected get testResPath(): string {
		let name = N4Class.of(this).name;
		if (name.endsWith("Tests")) {
			name = name.substring(0, name.length-5);
		}
		if (name.endsWith("Test")) {
			name = name.substring(0, name.length-4);
		}
		return name;
	}

	get testAbsResPath(): string {
		return join("spex.tests", "res", this.resSubFolderName);
	}

	public async loadSourceAndExpectation(testName: string): SourceAndExpectation {
		let np = global.process.env.NODE_PATH as string;
		
		// console.log("NODE_PATH", np);
		
		let resPath = np.split(delimiter).find(s => s.endsWith(this.testAbsResPath));
		if (!resPath) { // TODO res not in node_path when using n4jsc, workaround:
			resPath = np.split(delimiter).find(s => s.endsWith("spex.tests/src-gen/es"));
			if (resPath) {
				resPath = join(resPath.substring(0, resPath.length-11), "res", this.resSubFolderName);
			}
			
		}
		if (!resPath) {
			throw new Error("Resources for tests not found.")
		}


		// console.log("resPath", resPath, "this.testResPath" ,this.testResPath,"TestName", testName)

		let fullPath = join(resPath, this.testResPath, testName + this.resExtension);
		// console.log(fullPath);
		let s = await readFile(fullPath, {encoding: 'utf-8'});
		let [source, expected] = s.split(/\n__________________*\n/);
		return {source: source, expected: expected.replace(/\t/g, "    ")};
	}

	protected parse(src: string): Document {
		let parser = this.injector.create(Parser);
		let doc = parser.parse(new InputSource(this.name, src));
		return doc;
	}
}

export interface IResourceBasedTest extends IBasicResourceBasedTest {
	@Test
	async test() {
		// console.log("run test " + this.name)
		let sae = await this.loadSourceAndExpectation(this.name);
		// console.log(sae.source);
		let doc = this.parse(sae.source);
		let actual = doc.toXML();
//		try {
			SmartEqual.equalVars(actual, sae.expected, this.name);
//		} catch (e) {
//			console.log("_____________________________________");
//			console.log("Error test " + this.name);
//			console.log("_____________________________________");
//			console.log(sae.source);
//			console.log("______________\nExpected:");
//			console.log(sae.expected);
//			console.log("______________\nActual:");
//			console.log(actual);
//			throw e;
//		}
	}
}


@GenerateInjector()
@UseBinder(DefaultExtensionBinder)
export public abstract class ResourceBasedTest implements IResourceBasedTest {

	@Inject
	@Override
	injector: N4Injector;
	
	@Parameter
    @Override
    public name: string
}

@GenerateInjector()
@UseBinder(NoExtensionBinder)
export public abstract class ResourceBasedCoreTest implements IResourceBasedTest {

	@Inject
	@Override
	injector: N4Injector;
	
	@Parameter
    @Override
    public name: string
    
	
}

@GenerateInjector()
@UseBinder(DefaultExtensionBinder)
export public abstract class ResourceBasedOutputTest implements IBasicResourceBasedTest {

	@Inject
	@Override
	injector: N4Injector;
	
	@Parameter
    @Override
    public name: string
    
    
    @Override
    get resSubFolderName(): string { return "outputTests" }
    
    @Override
    get resExtension(): string { return ".spex_html"}
    
    protected parseAndOutput(src: string): HTMLElement {
		let parser = this.injector.create(Parser);
		let outputProcessor = this.injector.create(OutputProcessor);

		let doc = parser.parse(new InputSource(this.name, src));
		outputProcessor.init(parser.processorState);
 
		let htmlnode = outputProcessor.out(doc);
		return htmlnode;
	}
    
    @Test
	async test() {
		// console.log("run test " + this.name)
		let sae = await this.loadSourceAndExpectation(this.name);
		// console.log(sae.source);
		let root = this.parseAndOutput(sae.source);
		let actual = root.outerHTML;
//		try {
			SmartEqual.equalVars(actual, sae.expected, this.name);
//		} catch (e) {
//			console.log("_____________________________________");
//			console.log("Error test " + this.name);
//			console.log("_____________________________________");
//			console.log(sae.source);
//			console.log("______________\nExpected:");
//			console.log(sae.expected);
//			console.log("______________\nActual:");
//			console.log(actual);
//			console.log("______________\nRoot:");
//			console.log(JSON.stringify(root))
//			throw e;
//		}
	}
}

