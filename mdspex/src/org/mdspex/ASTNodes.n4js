import {ElementAnchor} from "org/mdspex/ElementAnchor";
import {ElementAnchorWithScope} from "org/mdspex/ElementAnchor";
import {ContainedFQID} from "org/mdspex/IDs";
import {FQID} from "org/mdspex/IDs";


export public function is(node: Node, name: string): boolean {
	if (node instanceof Element) return (node as Element).name == name;
	return false;
}

export public enum ElementType {
	BLOCK,
	INLINE,
	PAR
}

export public function normalizeSegment(seg: string): string {
	let s = "";
	let lastChar = "";
	for (let i = 0; i < seg.length; i++) {
		let c = seg.charAt(i);
		let code = seg.charCodeAt(i);
		if (code>32) { // skip control
			if ( // replace ASCII space, punctuation and symbols
				(code>=32 && code<=47)
			|| 	(code>=58 && code<=64)
			||	(code>=91 && code<=96)
			||  (code>=123 && code<=126)
			|| (code>=160 && code<=191) // Latin space, punctuation and symbols
			) c ="_";
			if (c!='_') {
				if (lastChar=='_' && s) {
					s+='_'
				}
				s += c;
			}
			lastChar = c;
		}
	}
	return s;
}




export public interface ASTSwitch<T> {

	switch(node: Node): T {
		if (!node) {
			return undefined;
		}
		if (node instanceof Document) {
			return this.caseDocument(node as Document);
		}
		if (node instanceof Block) {
			return this.caseBlock(node as Block);
		}
		if (node instanceof Inline) {
			return this.caseInline(node as Inline);
		}
		if (node instanceof Paragraph) {
			return this.caseParagraph(node as Paragraph);
		}
		if (node instanceof CDATAContainer) {
			return this.caseCDATAContainer(node as CDATAContainer);
		}
		if (node instanceof CDATA) {
			return this.caseCDATA(node as CDATA);
		}
		if (node instanceof Element) {
			return this.caseElement(node as Element);
		}
		return this.caseNode(node);

	}

	protected caseNode(node: Node): T {
		return this.defaultCase(node);
	}
	protected caseElement(node: Element): T {
		return this.caseNode(node);
	}
	protected caseBlock(node: Block): T {
		return this.caseElement(node);
	}
	protected caseCDATAContainer(node: CDATAContainer): T {
		return this.caseElement(node);
	}
	protected caseInline(node: Inline): T {
		return this.caseCDATAContainer(node);
	}
	protected caseParagraph(node: Paragraph): T {
		return this.caseCDATAContainer(node);
	}
	protected caseCDATA(node: CDATA): T {
		return this.defaultCase(node);
	}
	protected caseAttribute(node: Attribute): T {
		return this.defaultCase(node);
	}
	protected caseDocument(node: Document): T {
		return this.caseBlock(node);
	}

	protected defaultCase(node: Node | Attribute): T {
		return undefined;
	}
}

export public abstract class Node {

	@Final
	public parent: Element;

	startOffset: int;
	endOffset: int;

	/**
	 * Creates this node with given parent and add this node to parent's child nodes.
	 */
	constructor(parent: Element) {
		if (this instanceof Document) {
			return;
		}

		if (!parent) {
			throw new Error("node requires a parent");
		}

		this.parent = parent;
		if (!parent.nodes) {
			parent.nodes = [this];
		} else {
			parent.nodes.push(this);
		}

	}

	/**
	 * Returns XML-like string of this node and its children, formatting (indentation wise) according
	 * to indent level. Basically used for debugging and tests.
	 */
	public abstract toXML(indent=0): string

}

const TAB = "    ";

export public abstract class Element extends Node {

	/**
	 * Name of the element, e.g. "<br />" woud have the name "br". This is not
	 * the attribute "name".
	 */
	@Final
	name: string;

	@Final
	indentLevel: int;

	/**
	 * Only set if this element has an ID and can be linked to, i.e. it is an anchor.
	 */
	@Final
	anchor: ElementAnchor;

	attributes: [Attribute];
	nodes: [Node];

	constructor(name: string, indentLevel: int, parent: Element, idtype: string= undefined, id: string =undefined,
		definesIdScope = false) {

		super(parent);
		this.name = name;
		this.indentLevel = indentLevel;
		if (id) {
			let ctor: constructor{ElementAnchor} = (definesIdScope ? ElementAnchorWithScope : ElementAnchor);
			this.anchor = new ctor({element: this, id: id, type: idtype});
		}
	}

	get fqid(): ContainedFQID {

		if (this.anchor) {
			return this.anchor.fqid;
		}
		return undefined;
	}

	@Override
	public toXML(): string {
		let parts: [string] = [];
		parts.push("<" + this.name + (this.attributes ?
				this.attributes.map(a => " " + a.name + '= "' + a.value + '"').join("") : ""));

		if (this.nodes) {
			parts.push(">");
			parts.push(this.nodes.map((c, i) => {
					if (!(c instanceof CDATA) || i > 0) {
						if (c instanceof Element) {
							let ce = c as Element;
							return "\n" /*  + ce.indentLevel + ":" */ + TAB.repeat(ce.indentLevel) + c.toXML();
						} else {
							return "\n" + TAB.repeat(this.indentLevel) + c.toXML();
						}
					} else {
						return c.toXML();
					}
				}).join(""));
			if (!(this.nodes[this.nodes.length - 1] instanceof CDATA)) {
				parts.push("\n" + TAB.repeat(this.indentLevel));
			}
			parts.push("</" + this.name + ">");
		} else {
			parts.push(" />");
		}
		return parts.join("");
	}

	/**
	 * Returns the closest block element, either itself or container.
	 */
	public get block(): Block {
		if (this.parent) return this.parent.block;
		return undefined;
	}

	public abstract type(): ElementType

	public get lastChild(): Node {
		if (this.nodes) {
			return this.nodes[this.nodes.length - 1];
		}
		return undefined;
	}

	public trim() {
		let child = this.lastChild;
		if (child instanceof CDATA) {
			(child as CDATA).trim();
		}
	}

	public setAttribute(name: string, value: string) {
		let attr = this.attributes.find(a => a.name == name);
		if (attr) {
			attr.value = value;
		} else {
			attr = new Attribute(name, value);
			this.attributes.push(attr);
		}
	}

	public getAttribute(name: string, defValue: string=): string {
		let attr = this.attributes.find(a => a.name == name);
		if (attr) {
			return attr.value;
		}
		return defValue;
	}

}

/**
 * A block contains other elements but no CDATA directly.
 */
export public class Block extends Element {

	/**
	 * Returns this.
	 */
	@Override
	public get block(): Block {
		return this;
	}

	@Override
	public type(): ElementType {
		return ElementType.BLOCK;
	}
}

export public abstract class CDATAContainer extends Element {

	public get tailCDATA(): string {
		if (this.nodes && this.nodes[this.nodes.length - 1] instanceof CDATA) {
			let cdata = this.nodes[this.nodes.length - 1] as CDATA;
			return cdata.content;
		}
		return "";
	}

	public addCDATA(s: string) {
		let cdata: CDATA;
		if (this.nodes && this.nodes[this.nodes.length - 1] instanceof CDATA) {
			cdata = this.nodes[this.nodes.length - 1] as CDATA;
		} else {
			cdata = new CDATA(this);
		}
		cdata.add(s);
	}

}

/** 
 * An inline element may contain CDATA or other inline elements, 
 * but not blocks, paragraphs or lines.
 */
export public class Inline extends CDATAContainer {

	@Override
	public type(): ElementType {
		return ElementType.INLINE;
	}
}

export public class Link extends Inline {
	
	constructor(indentLevel: int, parent: Element, targetPQID: string) {
		super("link", indentLevel, parent);
		this.setAttribute("pqid", targetPQID);
	}
	
	public resolve(fqid: FQID) {
		this.setAttribute("fqid", fqid.toString());
	}
}


/**
 * A paragraph can only contain CDATA or inline elements, but no block elements nor
 * other paragraphs. 
 */
export public class Paragraph extends CDATAContainer {

	@Override
	public type(): ElementType {
		return ElementType.PAR;
	}
}

@Final
export public class CDATA extends Node {
	content = "";

	@Override
	public toXML(): string {
		return this.content;
	}

	public add(s: string) {
		this.content = this.content + s;
	}

	public trim() {
		this.content = this.content.trim();
	}

}

@Final
export public class Attribute {

	@Final
	name: string;
	value: string;

	public constructor(name: string, value: string) {
		this.name = name;
		this.value = value;
	}
}

@Final
export public class Document extends Block {
	indexes: Map<string, [Element]>;

	constructor() {
		super("spex", 0, undefined, undefined);
	}

	public stringify(offsets=false, ids=false): string {
		return JSON.stringify(this, (key, value) => {
				if (key == "parent" || key == "indentLevel"
					|| (!offsets && key.endsWith("Offset"))
					|| (!ids && key == "id")) {
					return undefined;
				}
				return value;
			});
	}

}
