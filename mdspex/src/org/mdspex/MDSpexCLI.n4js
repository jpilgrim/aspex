import {ArgType} from "org/mdspex/CLI";
import {CLI} from "org/mdspex/CLI";
import {HTMLFactory} from "org/mdspex/HTMLFactory";
import {InputSource} from "org/mdspex/InputSource";
import {OutputProcessor} from "org/mdspex/OutputProcessor";
import {Parser} from "org/mdspex/Parser";
import {DefaultProcessorState} from "org/mdspex/ProcessorState";
import {ProcessorState} from "org/mdspex/ProcessorState";
import {VFactory} from "org/mdspex/VNodes";
import {readFile} from "fs";
import {writeFile} from "fs";
import {N4Injector} from "n4js/lang/N4Injector";

@Binder
@Bind(ProcessorState, DefaultProcessorState)
@Bind(HTMLFactory, VFactory)
export public class DefaultExtensionBinder {}


interface ~MDSpexArgs {
	public verbose: boolean;
	public divOnly: boolean;
	public inputFile: string;
	public outputFile: string;
}

@GenerateInjector
@UseBinder(DefaultExtensionBinder)
class MDSpexCLI {
	
	@Inject parser: Parser
	@Inject outputProcessor: OutputProcessor;

	async main(argv: [string]) {
		let cli = new CLI();
		cli.setHelp();
		cli.opt("verbose", false);
		cli.opt("divOnly", false, "d", "only the spex div element is emitted");
		cli.indexed("inputFile", ArgType.STRING, 1, "name of input file", true);
		cli.indexed("outputFile", ArgType.STRING, 2, "name of output file, if not specified, output file is named as input with extension 'html'", false);

		let args = cli.parseArgs(process.argv) as MDSpexArgs;
		if (!args) {
			process.exit(1);
		}
		
		
		let inSrc = await readFile(args.inputFile, {encoding: 'utf-8'});
		let doc = this.parser.parse(new InputSource(args.inputFile , inSrc));
		
		this.outputProcessor.init(this.parser.processorState);
		let htmlnode = this.outputProcessor.out(doc);
		
		let strDiv = htmlnode.outerHTML;
		let strFull;
		if (args.divOnly) {
			strFull = strDiv;
		} else {
			strFull = 
				"<html><body>" + strFull + "</body></html>";
		}
		
		if (! args.outputFile) {
			let lastDot = args.inputFile.lastIndexOf(".");
			if (lastDot<0) lastDot = args.inputFile.length; 
			args.outputFile = args.inputFile.substring(0, lastDot-1) + ".html";
		}
		
		await writeFile(args.outputFile, strFull, {encoding: 'utf-8'});
	}

}

var mdspexCLI = N4Injector.of(MDSpexCLI).create(MDSpexCLI);
mdspexCLI.main(process.argv);

