import {Block} from "org/mdspex/ASTNodes";
import {Element} from "org/mdspex/ASTNodes";
import {ElementType} from "org/mdspex/ASTNodes";
import {Inline} from "org/mdspex/ASTNodes";
import {HTMLFactory} from "org/mdspex/HTMLFactory";
import {Element as HTMLElement} from "org/mdspex/HTMLNodes";
import {Node as HTMLNode} from "org/mdspex/HTMLNodes";
import {IProcessorState} from "org/mdspex/ProcessorState";
import {CharacterToken} from "org/mdspex/Token";
import {Token} from "org/mdspex/Token";
import {Node} from "org/mdspex/ASTNodes";

export public class OutputContext {

	public parentHTMLNode: HTMLNode;

	public currentElement: Element;

	@Final
	public factory: HTMLFactory;

	@Final
	public processorState: IProcessorState;

	constructor(@Spec spec: ~i~this) {}
}

export public class ExtensionContext {

	@Final
	public indentLevel: int;

	@Final
	public currentElement: Element;

	@Final
	public processorState: IProcessorState;

	constructor(@Spec spec: ~i~this) {}

	public get currentLine(): string {
		return this.processorState.inputSource.currentLine;
	}

	public get restOfLine(): string {
		return this.processorState.inputSource.restOfLine;
	}

	/**
	 * Returns previous char as token. This is not the lexed token, but the previous char
	 * with its category code.
	 */
	public get previousRawToken(): Token {
		let c = this.processorState.inputSource.peek(-2); // -2: 0: peek, -1: current, -2: prev.
		let cat = this.processorState.catcodeMap.category(c);
		return new CharacterToken(c, cat);
	}

	/**
	 * Returns the rest of line including the value of the current token (i.e., the ctrl)
	 * if present.
	 *
	 * During lexing, restOfLine and restOfLineWithCtrl return the same result.
	 * During parsing, the ctrl token is already consumed.
	 */
	public get restOfLineWithCtrl(): string {
		if (this.processorState.currentToken) return this.processorState.currentToken.rawValue + this
			.restOfLine; else return this.restOfLine;
	}
	
	/**
	 * Returns (last) preceding sibling or undefined, if no such sibling exists.
	 */
	public get precedingSibling(): Node {
		if (this.currentElement) {
			return this.currentElement.lastChild;
		}
		return undefined;
	}

	/**
	 * Returns (last) preceding sibling element or undefined, if no such sibling exists.
	 */
	public get precedingSiblingElement(): Element {
		if (this.currentElement && this.currentElement.lastChild instanceof Element) {
			return this.currentElement.lastChild as Element;
		}
		return undefined;
	}
}

export public interface ~ElementProvider {
	/**
	 * Creates the element.
	 */
	createElement(context: ExtensionContext): Element

	/**
	 * Close element previously created with createElement.
	 */
	closeElement(element: Element, context: ExtensionContext)

	/**
	 * Returns the output provider transforming the AST node to HTML.
	 * If undefined is returned, the default ElementToDivProvider is used.
	 */
	get outputProvider(): OutputProvider
}

export public interface ~OutputProvider {
	public get names(): [string]

	public process(context: OutputContext): HTMLElement
}

export public abstract class AbstractOutputProvider implements OutputProvider {

	@Override
	public process(context: OutputContext): HTMLElement {
		let element = this.createHTMLElement(context);
		this.copyAttributes(element, context);
		return element;
	}

	/**
	 * Base implementation, creates HTML element with same name as given element.
	 * If element name starts with underscore, undefined is returned.
	 */
	protected createHTMLElement(context: OutputContext): HTMLElement {
		if (context.currentElement.name.startsWith("_")) {
			return undefined;
		}
		return context.factory.createElement(context.currentElement.name);
	}

	/**
	 * Base implementation, copies all attributes which do not start with an underscore.
	 */
	protected copyAttributes(element: HTMLElement, context: OutputContext) {
		if (context.currentElement.attributes) {
			for (let a of context.currentElement.attributes) {
				if (!a.name.startsWith("_")) {
					let attr = context.factory.createAttr(a.name, a.value);
					element.setAttributeNode(attr);
				}
			}
		}
	}

}

export public class IdentityProvider extends AbstractOutputProvider {

	@Override
	@Final
	public names: [string];

	constructor(...names: string) {
		this.names = names;
	}
}

/**
 * Defines how the end of an extension is detected by the lexer and parser.
 *
 * Except for the CTRL end, the end of the extension is detected by the parser and
 * the characters signaling the end are not consumed by the extension. For 
 * extensions/elements ending with CTRL, the end is detected by the lexer and
 * the control sequence ending the element is consumed by the extension element (it 
 * becomes part of the CTRL sequence).
 */
@StringBased
export public enum ExtensionEndMarker {

	/**
	 * None end marker is used for blocks or paragraphs. The end of both
	 * element types is detected implicitly by the parser via a changed
	 * indentation level (block) or by empty lines or other elements ending
	 * a paragraph.
	 */
	NONE,

	/**
	 * Usually for inline elements, ends with an arbitrary sequence of characters
	 * starting with a control character.
	 *
	 * The end of the extension is detected by the lexer.
	 */
	CTRL,

	/**
	 * Usually for line elements, ends with the end of line.
	 *
	 * The end of the extension is detected by the lexer.
	 */
	EOL,

	/**
	 * Usually for inline elements, ends with a space (or EOL) character.
	 *
	 * The end of the extension is detected by the lexer.
	 */
	SPACE
}

export public interface ~Extension extends ElementProvider {

	/**
	 * Name of extension.
	 */
	get name(): string

	/**
	 * True if extension can be referenced by name (followed by command suffix, ":" by default).
	 * E.g., if name is "INFO", if refByName is true, the extension is used via "INFO:".
	 */
	get refByName(): boolean

	/**
	 * Returns element type.
	 */
	get elementType(): ElementType

	/**
	 * Returns the end marker type, that is, how the lexer and parser detect the end
	 * of the extension region.
	 */
	get endMarker(): ExtensionEndMarker

	/**
	 * Control-character(s) which is used to identify whether ctrlMatch is called for further evaluation. 
	 * If ctrlStart is undefined or empty, the extension can only be referenced by name. The returned
	 * character must be of Categegory "OTHER".
	 */
	get ctrlStart(): string

	/**
	 * Called if ctrlStart or name is found by lexer. This method is called with current line (starting with ctrlStart).
	 * It returns the length of the match, if any, or 0 otherwise. If multiple extension
	 * match, the one with the longer match one is chosen. 
	 */
	matchStart(context: ExtensionContext): int

	/**
	 * Control-character(s) which is used to identify whether matchEnd is called for further evaluation. 
	 * If ctrlEnd is undefined or empty, the extension can ends either at space, eol, or via indent.
	 * The ctrlEnd/matchEnd is called for all extensions, independently of how they started.
	 * It is also possible that an extension can be ended by alternative methods, e.g.
	 * eol and ctrl.
	 *
	 */
	get ctrlEnd(): string

	/**
	 * Called if ctrlEnd is found by lexer.
	 * It returns the length of the match, if any, or 0 otherwise. Only the last started (but not yet ended)
	 * extension is called. All inline extensions automatically end at end of a block or paragraph.
	 */
	matchEnd(context: ExtensionContext): int

}

/**
 * Default implementation of Extension.
 */
export public abstract class AbstractExtension implements Extension {

	/** Returns false by default. */
	@Override
	public get refByName(): boolean {
		return false;
	}

	/** Returns undefined by default, i.e., extension cannot be referenced by control sequence. */
	@Override
	public get ctrlStart(): string {
		return undefined;
	}

	/** Returns 0 by default. */
	@Override
	public matchStart(context: ExtensionContext): int {
		return 0;
	}

	/** Returns undefined by default, i.e., extension has no explicit end character. */
	@Override
	public get ctrlEnd(): string {
		return undefined;
	}

	/**
	 * Returns 0 by default. 
	 */
	@Override
	public matchEnd(context: ExtensionContext): int {
		return 0;
	}

	/**
	 * Trims white spaces at the end of the created element if elementType is different from inline.
	 */
	@Override
	public closeElement(element: Element, context: ExtensionContext) {
		if (this.elementType == ElementType.INLINE) {
			return;
		}
		element.trim();
	}

	@Override
	public get outputProvider(): OutputProvider {
		return undefined;
	}

}

export public class NamedBlockCommand extends AbstractExtension {

	@Override @Final
	public name: string;
	constructor(name: string) {
		this.name = name;
	}

	@Override
	public get refByName(): boolean {
		return true;
	}

	@Override
	public get elementType(): ElementType {
		return ElementType.BLOCK;
	}

	@Override
	public get endMarker(): ExtensionEndMarker {
		return ExtensionEndMarker.NONE;
	}

	/**
	 * Creates element with name and appends it to the parent element with given indentation.
	 */
	@Override
	public createElement(context: ExtensionContext): Element {
		return new Block(this.name, context.indentLevel + 1, context.currentElement);
	}

}

export public class InlineFormatting extends AbstractExtension {

	@Final
	ctrlChar: string;

	@Override
	@Final
	public name: string;

	constructor(ctrlChar: string, name: string) {
		this.ctrlChar = ctrlChar;
		this.name = name;
	}

	@Override
	public get elementType(): ElementType {
		return ElementType.INLINE;
	}

	@Override
	public get endMarker(): ExtensionEndMarker {
		return ExtensionEndMarker.CTRL;
	}

	@Override
	public get ctrlStart(): string {
		return this.ctrlChar;
	}

	@Override
	public get ctrlEnd(): string {
		return this.ctrlChar;
	}

	@Override
	public matchStart(context: ExtensionContext): int {
		if (context.currentLine.startsWith(this.ctrlStart)) {
			return 1;
		}
		return 0;
	}

	@Override
	public matchEnd(context: ExtensionContext): int {
		return this.matchStart(context);
	}

	@Override
	public createElement(context: ExtensionContext): Element {
		return new Inline(this.name, context.indentLevel, context.currentElement);
	}
}

