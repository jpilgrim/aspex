import {Element} from "org/mdspex/ASTNodes";
import {normalizeSegment} from "org/mdspex/ASTNodes";
import {ContainedFQN} from "org/mdspex/QualifiedNames";
import {Anchor} from "org/mdspex/MDSpexIndex";
import {IDScope} from "org/mdspex/MDSpexIndex";
/**
 * Holds all information about ID and scopes of elements.
 */
export public class ElementAnchor implements Anchor {

	/**
	 * The qualified element.
	 */
	@Final
	public element: Element;

	/**
	 * ID of the element, this is used for linking and is usually translated to the attribute
	 * "id". This id is normalized, i.e. special characters are replaced with underscores.
	 */
	@Final
	@Override
	public id: string;

	/**
	 * The type of the id, cf. PQN for details.
	 */
	@Final
	@Override
	public type: string;
	
	@Final
	public containingScope: ElementAnchorWithScope;

	@CovariantConstructor
	constructor(@Spec spec: ~i~this) {
		this.id = normalizeSegment(spec.id);
	}

	@Override
	public get fqn(): ContainedFQN {
		let scope = this.containingScope;
		return new ContainedFQN(this.type, this.id, scope?scope.fqn:undefined);
	}
}

export class ElementAnchorWithScope extends ElementAnchor implements IDScope {

	@Override
	@Final
	public scopedAnchors: [ElementAnchor] = [];
	
	@Override
	public get fqn(): ContainedFQN {
		return new ContainedFQN(this.type, this.id, 
			this.containingScope?this.containingScope.fqn:undefined
		);
	}
	
}