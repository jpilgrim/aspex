import {Document} from "org/mdspex/ASTNodes";
import {Element} from "org/mdspex/ASTNodes";
import {Paragraph} from "org/mdspex/ASTNodes";
import {AbstractExtension} from "org/mdspex/Extension";
import {AbstractOutputProvider} from "org/mdspex/Extension";
import {Extension} from "org/mdspex/Extension";
import {ExtensionContext} from "org/mdspex/Extension";
import {ExtensionEndMarker} from "org/mdspex/Extension";
import {ExtensionType} from "org/mdspex/Extension";
import {FormattingExtension} from "org/mdspex/Extension";
import {IdentityProvider} from "org/mdspex/Extension";
import {NamedBlockCommand} from "org/mdspex/Extension";
import {OutputContext} from "org/mdspex/Extension";
import {OutputProvider} from "org/mdspex/Extension";
import {Element as HTMLElement} from "org/mdspex/HTMLNodes";
import {ATXHeading} from "org/mdspex/extensions/ATXHeadings";
import {LinkExtension} from "org/mdspex/extensions/LinkExtension";
import {BulletListItems} from "org/mdspex/extensions/ListItems";
import {DashListItems} from "org/mdspex/extensions/ListItems";

/**
 * Default registered set of extension.
 * 
 * Additionally, default handlers for 
 * paragraphs (ParagraphHandler), 
 * pre-formatted code 
 * and the document (DocumentHandler) are used.
 */
export public class DefaultExtensions {
	
	extensions: [Extension];
	constructor() {
		this.extensions = ["NOTE", "INFO", "WARNING", "TODO"].map(name => new NamedBlockCommand(name));
		this.extensions.push(new ATXHeading());
		this.extensions.push(new BulletListItems());
		this.extensions.push(new DashListItems());
		this.extensions.push(new FormattingExtension('*', 'strong'));
		this.extensions.push(new FormattingExtension('_', 'em'));
		this.extensions.push(new LinkExtension());
	}

}


export public class DocumentHandler extends AbstractExtension {

	@Override
	public get name(): string {
		return "spex";
	}

	@Override
	public createElement(context: ExtensionContext): Element {
		return new Document();
	}

	@Override
	public get extensionType(): ExtensionType {
		return ExtensionType.BLOCK;
	}

	@Override
	public get endMarker(): ExtensionEndMarker {
		return ExtensionEndMarker.NONE;
	}
}

export public class ParagraphHandler extends AbstractExtension {

	const ParagraphProvider = new IdentityProvider("p");

	@Override
	public get name(): string {
		return "p";
	}

	@Override
	public createElement(context: ExtensionContext): Element {
		return new Paragraph("p", context.indentLevel, context.currentElement);
	}

	@Override
	public get extensionType(): ExtensionType {
		return ExtensionType.PAR;
	}

	@Override
	public get endMarker(): ExtensionEndMarker {
		return ExtensionEndMarker.NONE;
	}
	
	@Override
	public get outputProvider(): OutputProvider {
		return ParagraphHandler.ParagraphProvider; 
	}
}

export public class PrecodeToPreCodeProvider extends AbstractOutputProvider {
/**
	 * Default provider returns empty array, matches all.
	 */
	@Override
	public get names(): [string] {
		return ["precode"];
	}
	
	@Override
	public process(context: OutputContext): HTMLElement {
		let pre = context.factory.createElement("pre");
		super.copyAttributes(pre, context);
		let code = context.factory.createElement("code");
		pre.appendChild(code);
		return code;
	}
}

export public class PreformattedHandler extends AbstractExtension {

	@Override
	public get name(): string {
		return "precode";
	}

	@Override
	public createElement(context: ExtensionContext): Element {
		return new Paragraph("precode", context.indentLevel, context.currentElement);
	}

	@Override
	public get extensionType(): ExtensionType {
		return ExtensionType.PAR;
	}

	@Override
	public get endMarker(): ExtensionEndMarker {
		return ExtensionEndMarker.NONE;
	}
	
	@Override
	public get outputProvider(): OutputProvider {
		return ParagraphHandler.ParagraphProvider; 
	}
}
